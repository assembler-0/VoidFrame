# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, dev ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            nasm \
            xorriso \
            grub-pc-bin \
            grub-common \
            qemu-system-x86 \
            mtools \
            lld \
            llvm \
            cmake \
            ninja-build \

      - name: Compile & Link (CMake)
        run: |
            mkdir cmake-build
            cd cmake-build
            cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain/linux-x64.cmake
            ninja -j$(nproc)

      - name: Artifact Analysis
        run: |
          timeout 30s ninja runmin || true
          
          grep -q "1KCSWF23Z456789" bootstrap.log
          ! grep -i "panic\|fault\|crash\|oops\|error\|failed" serial.log
          
          ls -la voidframe.krnl
          test -s voidframe.krnl
          
          # Check if ISO was created
          ls -la VoidFrame.iso
          test -s VoidFrame.iso
          
          file voidframe.krnl | grep -q "ELF.*executable"
    
          # Verify kernel size is reasonable (not empty, not huge)
          KERNEL_SIZE=$(stat -c%s voidframe.krnl)
          test $KERNEL_SIZE -gt 100000    # > 100KB
          test $KERNEL_SIZE -lt 10000000  # < 10MB
          
          # Check ISO bootability
          file VoidFrame.iso | grep -q "ISO.*bootable"

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: voidframe-build-${{ github.sha }}
          path: |
            voidframe.krnl
            VoidFrame.iso
          retention-days: 30